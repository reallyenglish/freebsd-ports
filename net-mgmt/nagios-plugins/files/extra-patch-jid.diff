--- configure.ac.after_patch	2014-07-17 11:52:23.000000000 +0900
+++ configure.ac	2014-07-17 11:55:42.000000000 +0900
@@ -755,10 +755,10 @@
 elif ps -axwo 'stat comm vsz rss user uid pid ppid args' 2>/dev/null | \
 	egrep -i ["^ *STAT +COMMAND +VSZ +RSS +USER +UID +PID +PPID +COMMAND"] > /dev/null
 then
-	ac_cv_ps_varlist="[procstat,&procuid,&procpid,&procppid,&procvsz,&procrss,&procpcpu,procprog,&pos]"
-	ac_cv_ps_command="$PATH_TO_PS -axwo 'stat uid pid ppid vsz rss pcpu comm args'"
-	ac_cv_ps_format="%s %d %d %d %d %d %f %s %n"
-	ac_cv_ps_cols=9
+	ac_cv_ps_varlist="[procstat,&procuid,&procpid,&procppid,&procjid,&procvsz,&procrss,&procpcpu,procprog,&pos]"
+	ac_cv_ps_command="$PATH_TO_PS -axwo 'stat uid pid ppid jid vsz rss pcpu comm args'"
+	ac_cv_ps_format="%s %d %d %d %d %d %d %f %s %n"
+	ac_cv_ps_cols=10
 	AC_MSG_RESULT([$ac_cv_ps_command])
 
 dnl FreeBSD 4.x
--- plugins/check_nagios.c.after_patch	2014-07-17 11:56:33.000000000 +0900
+++ plugins/check_nagios.c	2014-07-17 11:57:04.000000000 +0900
@@ -64,6 +64,7 @@
 	int procuid = 0;
 	int procpid = 0;
 	int procppid = 0;
+    int procjid = 0;
 	int procvsz = 0;
 	int procrss = 0;
 	float procpcpu = 0;
--- plugins/check_procs.c.after_patch	2014-07-17 11:57:26.000000000 +0900
+++ plugins/check_procs.c	2014-07-17 12:06:24.000000000 +0900
@@ -70,6 +70,7 @@
 #define PCPU 256
 #define ELAPSED 512
 #define EREG_ARGS 1024
+#define JID 2048
 
 #define KTHREAD_PARENT "kthreadd" /* the parent process of kernel threads:
 							ppid of procs are compared to pid of this proc*/
@@ -101,6 +102,7 @@
 char tmp[MAX_INPUT_BUFFER];
 int kthread_filter = 0;
 int usepid = 0; /* whether to test for pid or /proc/pid/exe */
+int jid;
 
 FILE *ps_input = NULL;
 
@@ -130,6 +132,7 @@
 	int procuid = 0;
 	pid_t procpid = 0;
 	pid_t procppid = 0;
+    int procjid = 0;
 	pid_t kthread_ppid = 0;
 	int procvsz = 0;
 	int procrss = 0;
@@ -230,9 +233,9 @@
 			procseconds = convert_to_seconds(procetime);
 
 			if (verbose >= 3)
-				printf ("proc#=%d uid=%d vsz=%d rss=%d pid=%d ppid=%d pcpu=%.2f stat=%s etime=%s prog=%s args=%s\n", 
+				printf ("proc#=%d uid=%d vsz=%d rss=%d pid=%d ppid=%d jid=%d pcpu=%.2f stat=%s etime=%s prog=%s args=%s\n", 
 					procs, procuid, procvsz, procrss,
-					procpid, procppid, procpcpu, procstat, 
+					procpid, procppid, procjid, procpcpu, procstat, 
 					procetime, procprog, procargs);
 
 			/* Ignore self */
@@ -275,6 +278,8 @@
 				resultsum |= PROG;
 			if ((options & PPID) && (procppid == ppid))
 				resultsum |= PPID;
+            if ((options & JID) && (procjid == jid))
+                resultsum |= JID;
 			if ((options & USER) && (procuid == uid))
 				resultsum |= USER;
 			if ((options & VSZ)  && (procvsz >= vsz))
@@ -292,9 +297,9 @@
 
 			procs++;
 			if (verbose >= 2) {
-				printf ("Matched: uid=%d vsz=%d rss=%d pid=%d ppid=%d pcpu=%.2f stat=%s etime=%s prog=%s args=%s\n", 
+				printf ("Matched: uid=%d vsz=%d rss=%d pid=%d ppid=%d jid=%d pcpu=%.2f stat=%s etime=%s prog=%s args=%s\n", 
 					procuid, procvsz, procrss,
-					procpid, procppid, procpcpu, procstat, 
+					procpid, procppid, procjid, procpcpu, procstat, 
 					procetime, procprog, procargs);
 			}
 
@@ -395,6 +400,7 @@
 		{"timeout", required_argument, 0, 't'},
 		{"status", required_argument, 0, 's'},
 		{"ppid", required_argument, 0, 'p'},
+		{"jid", required_argument, 0, 'j'},
 		{"user", required_argument, 0, 'u'},
 		{"command", required_argument, 0, 'C'},
 		{"vsz", required_argument, 0, 'z'},
@@ -417,7 +423,7 @@
 			strcpy (argv[c], "-t");
 
 	while (1) {
-		c = getopt_long (argc, argv, "Vvhkt:c:w:p:s:u:C:a:z:r:m:P:T",
+		c = getopt_long (argc, argv, "Vvhkt:c:w:p:s:u:C:a:z:r:m:P:Tj:",
 			longopts, &option);
 
 		if (c == -1 || c == EOF)
@@ -451,6 +457,12 @@
 				break;
 			}
 			usage4 (_("Parent Process ID must be an integer!"));
+        case 'j':                                   /* jail id */
+            if (sscanf (optarg, "%d%[^0-9]", &jid, tmp) == 1) {
+                asprintf (&fmt, "%s%sJID = %d", (fmt ? fmt : "") , (options ? ", " : ""), jid);
+                options |= JID;
+                break;
+            }
 		case 's':									/* status */
 			if (statopts)
 				break;
@@ -731,6 +743,8 @@
   printf ("   %s\n", _("RSZDT, plus others based on the output of your 'ps' command)."));
   printf (" %s\n", "-p, --ppid=PPID");
   printf ("   %s\n", _("Only scan for children of the parent process ID indicated."));
+  printf (" %s\n", "-j, --jid=JID");
+  printf (" %s\n", _("Only scan for process running in jail which ID is JID."));
   printf (" %s\n", "-z, --vsz=VSZ");
   printf ("   %s\n", _("Only scan for processes with VSZ higher than indicated."));
   printf (" %s\n", "-r, --rss=RSS");
@@ -779,7 +793,7 @@
 print_usage (void)
 {
   printf ("%s\n", _("Usage:"));
-	printf ("%s -w <range> -c <range> [-m metric] [-s state] [-p ppid]\n", progname);
+	printf ("%s -w <range> -c <range> [-m metric] [-s state] [-p ppid] [-j jid]\n", progname);
   printf (" [-u user] [-r rss] [-z vsz] [-P %%cpu] [-a argument-array]\n");
   printf (" [-C command] [-k] [-t timeout] [-v]\n");
 }
